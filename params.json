{"name":"Gnotty","tagline":"gnotty ties the knot between the web and IRC.","body":"Created by [Stephen McDonald](http://twitter.com/stephen_mcd)\r\n\r\nGnotty ties the knot between the web and IRC. It is designed to assist\r\nopen source projects that host an IRC channel for collaboration on\r\ntheir project.\r\nGnotty is [BSD licensed](http://www.linfo.org/bsdlicense.html).\r\n\r\nGnotty is comprised of several parts. Primarily Gnotty provides a\r\nmodern web client for communicating with an IRC channel via a web\r\nbrowser. The web server uses [gevent](http://www.gevent.org) and\r\n[WebSockets](http://en.wikipedia.org/wiki/WebSockets), which provide\r\nthe communication layer between the IRC channel and the web browser.\r\nTwitter's [Bootstrap](http://twitter.github.com/bootstrap/) is used\r\nto style the web interface, with customisable templates provided for\r\nskinning.\r\n\r\nSecondly, Gnotty provides the ability to run a highly customisable\r\nIRC bot. Different classes of bots can be configured on startup, and\r\nbots can perform different services such as message logging and\r\ninteracting with users in the IRC channel. Bots also contain webhooks,\r\nwhich allows bots to receive input over HTTP from external services.\r\n\r\nGnotty also provides an optional Django application for archiving IRC\r\nmessages for browsing and searching via a web interface. By default\r\nthe IRC bot uses Python's logging module to provide configurable\r\nlogging handlers for IRC messages. When the Django application is\r\nused, a logging handler is added that logs all IRC messages to the\r\nDjango project's database. The Django application then provides all\r\nthe necessary views and templates for messages to be searched by\r\nkeyword, or browsed by date with monthly calendars.\r\n\r\nNote that the Django application is entirely optional. Gnotty can\r\nbe run without using Django at all, as a stand-alone gevent web\r\nserver that provides the web interface to an IRC channel, with\r\nconfigurable IRC bots.\r\n\r\nInstallation\r\n============\r\n\r\nThe easiest way to install Gnotty is directly from PyPi using\r\n[pip](http://www.pip-installer.org) by running the command below::\r\n\r\n    $ pip install -U gnotty\r\n\r\nOtherwise you can download Gnotty and install it directly from\r\nsource::\r\n\r\n    $ python setup.py install\r\n\r\nConfiguration\r\n=============\r\n\r\nGnotty is configured via a handful of settings. When integrated\r\nwith Django, these settings can be defined in your Django project's\r\n``settings.py`` module. When Gnotty is run as a stand-alone\r\nclient, these same settings can be defined via the command line, or\r\nin a separate Python configuration module. See the \"Stand-Alone Web\r\nClient\" section below for details.\r\n\r\n  * ``GNOTTY_IRC_HOST`` - IRC host address to connect to.\r\n    *string, default: irc.freenode.net*\r\n  * ``GNOTTY_IRC_PORT`` - IRC port to connect to.\r\n    *integer, default: 6667*\r\n  * ``GNOTTY_HTTP_HOST`` - HTTP host address to serve from.\r\n    *string, default: 127.0.0.1*\r\n  * ``GNOTTY_HTTP_PORT`` - HTTP port to serve from.\r\n    *integer, default: 8080*\r\n  * ``GNOTTY_IRC_CHANNEL`` - IRC channel to join.\r\n    *string, default: #gnotty*\r\n  * ``GNOTTY_BOT_CLASS`` - Dotted Python path to the IRC client bot\r\n    class to run.\r\n    *string, default: gnotty.bots.BaseBot*\r\n  * ``GNOTTY_BOT_NICKNAME`` - IRC nickname the logging client will\r\n    use.\r\n    *string, default: gnotty*\r\n  * ``GNOTTY_DAEMON`` - run in daemon mode.\r\n    *boolean, default: False*\r\n  * ``GNOTTY_PID_FILE`` - path to write PID file to when in daemon\r\n    mode.\r\n    *string, default: [tmp]/gnotty-[http-host]-[http-port].pid*\r\n\r\nTo be clear: the IRC host and port are for specifing the IRC server to\r\nconnect to. The HTTP host and port are what will be used to host the\r\ngevent/WebSocket server.\r\n\r\nDjango Integration\r\n==================\r\n\r\nWith the above settings defined in your Django project's\r\n``settings.py`` module, a few more steps are required. As with most\r\nDjango apps, add ``gnotty`` to your ``INSTALLED_APPS`` setting, and\r\n``gnotty.urls`` to your project's ``urls.py`` module::\r\n\r\n    # settings.py\r\n    INSTALLED_APPS = (\r\n        # other apps here\r\n        'gnotty',\r\n    )\r\n\r\n    # urls.py\r\n    from django.conf.urls.defaults import patterns, include, url\r\n    urlpatterns = patterns('',\r\n        # other patterns here\r\n        ('^irc/', include('gnotty.urls')),\r\n    )\r\n\r\nAs you can see we've mounted all of the urls Gnotty provides under\r\nthe prefix ``/irc/`` - feel free to use whatever suits you here. With\r\nthis prefix, the URL on our Django development server\r\n[http://127.0.0.1:8000/irc/](http://127.0.0.1:8000/irc/) will load\r\nthe chat interface to the IRC channel, along with a search form for\r\nsearching the message archive, and links to browsing the archive by\r\ndate.\r\n\r\nThe final step when integrated with Django is to run the Gnotty\r\nserver itself. The Gnotty server is backed by gevent, and will host\r\nthe WebSocket bridge to the IRC channel. It will also start up the\r\nIRC bot that will connect to the channel, and log all of the messages\r\nin the channel to the database archive.\r\n\r\nRunning the Gnotty server when integrated with Django is simply a\r\nmatter of running the ``gnottify`` Django management command::\r\n\r\n    $ python manage.py gnottify\r\n\r\nStand-Alone Web Client\r\n======================\r\n\r\nAs mentioned, Gnotty can also be run as a stand-alone web client\r\nwithout using Django at all. In this mode, only the web interface to\r\nthe IRC channel is provided, along with whichever IRC bot class is\r\nconfigured. Message logging can be configured using standard handlers\r\nfor the ``logging`` module in Python's standard library.\r\n\r\nOnce installed, the command ``gnottify`` should be available on your\r\nsystem, and all of the options described earlier can be provided as\r\narguments to it::\r\n\r\n    $ gnottify --help\r\n    Usage: gnottify [options]\r\n\r\n    Options:\r\n      --version             show program's version number and exit\r\n      -h, --help            show this help message and exit\r\n      -A HOST, --irc-host=HOST\r\n                            IRC host address to connect to\r\n                            [default: irc.freenode.net]\r\n      -P PORT, --irc-port=PORT\r\n                            IRC port to connect to\r\n                            [default: 6667]\r\n      -a HOST, --http-host=HOST\r\n                            HTTP host address to serve from\r\n                            [default: 127.0.0.1]\r\n      -p PORT, --http-port=PORT\r\n                            HTTP port to serve from\r\n                            [default: 8080]\r\n      -C CHANNEL, --irc-channel=CHANNEL\r\n                            IRC channel to join\r\n                            [default: #gnotty]\r\n      -c DOTTED_PYTHON_PATH, --bot-class=DOTTED_PYTHON_PATH\r\n                            Dotted Python path to the IRC client bot class to run\r\n                            [default: gnotty.bots.LoggingBot]\r\n      -n NICKNAME, --bot-nickname=NICKNAME\r\n                            IRC nickname the bot will use\r\n                            [default: gnotty]\r\n      -D, --daemon          run in daemon mode\r\n      -k, --kill            Shuts down a previously started daemon\r\n      -F FILE_PATH, --pid-file=FILE_PATH\r\n                            path to write PID file to when in daemon mode\r\n      -f FILE_PATH, --conf-file=FILE_PATH\r\n                            path to a Python config file to load options from\r\n\r\nNote the final argument in the list, ``--conf-file``. This can be used\r\nto provide the path to a Python config module, that contains each of\r\nthe settings described earlier. Any options provided via command-line\r\narguments will take precedence over any options defined in the Python\r\nconfiguration module.\r\n\r\nDaemon Mode\r\n===========\r\n\r\nGnotty can be configured to run as a background process when the\r\n``GNOTTY_DAEMON`` setting is set to ``True`` (the ``--daemon`` arg\r\nwhen running stand-alone). When in daemon mode, Gnotty will write its\r\nprocess ID to the absolute file path specfified by the\r\n``GNOTTY_PID_FILE`` setting (the ``--pid-file`` arg when running\r\nstand-alone). If the PID file path is not configured, Gnotty will use\r\na file name based on the HTTP host and port, in your operating\r\nsystem's location for temporary files.\r\n\r\nWhen run in daemon mode, Gnotty will check for an existing PID file\r\nand if found, will attempt to shut down a previously started server\r\nwith the same PID file.\r\n\r\nIRC Bots\r\n========\r\n\r\nWhen running, Gnotty hosts an IRC bot that will connect to the\r\nconfigured IRC channel. The ``gnotty.bots.BaseBot`` bot is run by\r\ndefault, which implements message logging and an empty interface for\r\nwebhooks, which allows the IRC bot to receive data over HTTP.\r\n\r\nYou can implement your own IRC bot simply by subclassing\r\n``gnotty.bots.BaseBot`` and defining the Python dotted path to it on\r\nstartup, via the ``GNOTTY_BOT_CLASS`` setting (the ``--bot-class`` arg\r\nwhen running stand-alone).\r\n\r\nThe ``gnotty.bots.BaseBot`` class is derived from the third-party\r\n``irclib`` package's ``irc.client.SimpleIRCClient`` class (and\r\ntranslated into a Python new-style class for sanity). Consult the\r\n``irclib`` docs and code for details about each of the methods that\r\nare implemented for handling events with an IRC channel.\r\n\r\nThese are the built-in IRC bot classes provided by the\r\n``gnotty.bots`` module:\r\n\r\n  * ``gnotty.bots.BaseBot`` - The default bot class that implements\r\n    logging and webhooks. Your custom bots should subclass this.\r\n  * ``gnotty.bots.ChatBot`` - A bot that demonstrates interacting with\r\n    the IRC channel by greeting and responding to other users.\r\n    Requires the ``nltk`` package to be installed.\r\n  * ``gnotty.bots.CommitBot`` - A base bot class for receiving commit\r\n    information for version control systems via bot webhooks, and\r\n    relaying the commits to the IRC channel. Used as the base for the\r\n    ``GitHubBot`` and ``BitBucketBot`` classes.\r\n  * ``gnotty.bots.GitHubBot`` - ``CommitBot`` subclass for\r\n    [GitHub](http://github.com).\r\n  * ``gnotty.bots.BitBucketBot`` - ``CommitBot`` subclass for\r\n    [Bitbucket](http://bitbucket.org).\r\n\r\nBot Webhooks\r\n============\r\n\r\nIRC bots run by Gnotty contain the ability to receive data over HTTP\r\nvia webhooks. The gevent web server will intercept any URLs prefixed\r\nwith the path ``/webhook/``, and pass the request onto the\r\n``on_webhook`` method defined on the bot class running. The\r\n``on_webhook`` method receives the following arguments:\r\n\r\n  * ``environ`` - The raw environment dict supplied by the gevent web\r\n    server that contains all information about the HTTP request.\r\n  * ``url`` - The actual URL accessed.\r\n  * ``params`` - A dictionary containing all of the POST and GET data.\r\n\r\nNote that the ``url`` and ``params`` arguments are provided for\r\nconvenience, with their values retrieved from the ``environ``\r\nargument.\r\n\r\nHere's an example bot implementing a webhook that reads a\r\nquery-string value and sends it to the IRC channel::\r\n\r\n  # in my_bot.py\r\n\r\n  from gnotty.bots import BaseBot\r\n\r\n  class MyWebhookBot(BaseBot):\r\n      def on_webhook(self, environ, url, params):\r\n          # Get the \"message\" query-string parameter.\r\n          self.message_channel(params[\"message\"])\r\n\r\nThen with Gnotty started using the following arguments::\r\n\r\n  $ gnottify --http-host=127.0.0.1 --http-port=8000 --bot-class=my_bot.MyWebhookBot\r\n\r\nHitting the URL ``http://127.0.0.1:8000/webhook/?message=Hello`` would\r\ncause the bot to send the message \"Hello\" to the IRC channel.\r\n\r\nMessage Logging\r\n===============\r\n\r\nBy default, each IRC message in the channel is logged by the IRC bot\r\nrun by Gnotty. Logging occurs using [Python's logging module](\r\nhttp://docs.python.org/library/logging.html), to the logger named\r\n``irc``.\r\n\r\nEach log record contains the following attributes, where ``record`` is\r\nthe log record instance:\r\n\r\n  * ``record.server`` - The IRC server the message occurred on.\r\n  * ``record.channel`` - The IRC channel the message occurred on.\r\n  * ``record.nickname`` - The nickname of the user who sent the\r\n    message.\r\n  * ``record.msg`` - The message itself.\r\n\r\nHere's an example of adding an extra logging handler for IRC messages::\r\n\r\n  from logging import getLogger, StreamHandler\r\n\r\n  class MyLogHandler(StreamHandler):\r\n      def emit(self, record):\r\n          # Do something cool with the log record.\r\n          print record.msg\r\n\r\n  getLogger(\"irc\").addHandler(MyLogHandler())\r\n\r\nJavaScript Client\r\n=================\r\n\r\nThe web client that Gnotty provides includes all the necessary\r\nJavaScript files for communicating with the WebSocket server, such as\r\nDouglas Crockford's ``json2.js``, and the ``socket.io.js`` library\r\nitself. Also provided is the file ``gnotty.js`` which implements a\r\ncouple of public functions used by the web interface. The first is the\r\n``gnotty`` JavaScript function, which deals directly with the HTML\r\nstructure of the chat template::\r\n\r\n    // Start up the default UI. This function isn't very\r\n    // interesting, since it's bound to the HTML provided\r\n    // by Gnotty's chat template.\r\n    gnotty({\r\n        httpHost:     '127.0.0.1',\r\n        httpPort:     '8080',\r\n        ircHost:      'irc.freenode.net',\r\n        ircPort:      '6667',\r\n        ircChannel:   '#gnotty'\r\n    });\r\n\r\nThe second interface is the ``IRCClient`` function. This is of\r\nparticular interest if you'd like to create your own chat interface,\r\nas it deals exclusively with communication between the web browser and\r\nthe WebSocket server. Here's an example client that simply writes\r\nevents out to the console::\r\n\r\n    // Prompt the user for a nickname and create a IRC client.\r\n    var client = new IRCClient({\r\n        httpHost:     '127.0.0.1',\r\n        httpPort:     '8080',\r\n        ircHost:      'irc.freenode.net',\r\n        ircPort:      '6667',\r\n        ircChannel:   '#gnotty',\r\n        ircNickname:  prompt('Enter a nickname:')\r\n    });\r\n\r\n    // When the client first joins the IRC channel,\r\n    // send a message to the channel to say hello.\r\n    client.onJoin = function() {\r\n        console.log('joined the channel');\r\n        client.message('Hello, is it me you\\'re looking for?');\r\n    };\r\n\r\n    // When someone joins or leaves the channel, we're given the\r\n    // entire user list.\r\n    client.onNicknames = function(nicknames) {\r\n        console.log('The user list changed, here it is: ' + nicknames.join(', '));\r\n    });\r\n\r\n    // Whenever a message is received from the channel, it's an\r\n    // object with nickname and message properties.\r\n    client.onMessage = function(data) {\r\n        console.log(data.nickname + ' wrote: ' + data.message);\r\n    });\r\n\r\n    // When we leave, reload the page.\r\n    client.onLeave = function() {\r\n        location.reload();\r\n    };\r\n\r\n    // The IRC server rejected the nickname.\r\n    client.onInvalid = function() {\r\n        console.log('Invalid nickname, please try again.');\r\n    };\r\n\r\nAs you may have guessed, the server-side settings configured for\r\nGnotty are passed directly into the ``gnotty`` JavaScript function,\r\nwhich then creates its own ``IRCClient`` instance.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}